#! /usr/bin/env mulle-bash
# shellcheck shell=bash
#
#   Copyright (c) 2018 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_MONITOR_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

MULLE_EXECUTABLE_VERSION="1.0.1"

#
# Determine location of own libexec directory. Which is `src` in development
# and ../libexec when deployed. MULLE_EXECUTABLE needs to be defined for this.
#

if [ -z "${MULLE_MONITOR_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-monitor" "mulle-monitor-callback.sh"
   MULLE_MONITOR_LIBEXEC_DIR="${RVAL}"
fi


#
# This is the main user interface to mulle-monitor
#

SHOWN_COMMANDS="\
   callback       : manage callbacks
   patternfile    : manage patternfiles
   task           : manage tasks
   run            : monitor files and run scripts"

HIDDEN_COMMANDS="\
   clean          : passed to mulle-match
   list           : passed to mulle-match
   libexec-dir    : print path to mulle-monitor libexec
   uname          : mulle-monitors simplified uname(1)"


monitor::print_commands()
{
   local show_all="${1:-NO}"

   printf "%s\n" "${SHOWN_COMMANDS}"

   if [ "${show_all}" != 'NO' ]
   then
      printf "%s\n" "${HIDDEN_COMMANDS}"
   fi
}


print_hidden_flags()
{
   cat <<EOF
   --default-callback <command> : use 'echo <taskname>' to run only one task
EOF
}


monitor::print_flags()
{
   local show_all="${1:-NO}"

   local delimiter

   delimiter="                        : "

   if [ "${show_all}" != 'NO' ]
   then
      print_hidden_flags
   fi

   echo "   -e   ${delimiter}bypass mulle-env check"
   echo "   -f   ${delimiter}force operation"
   echo "   --sleep <delay>              : time to coalesce multiple events"

   options_technical_flags_usage "${delimiter}"
}


monitor::_usage()
{
   local verbose="${1:-NO}"
   local error="${2}"

   if [ ! -z "${error}" ]
   then
      log_error "${error}"
   fi

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] [command]

   The filesystem monitor. Invokes callbacks based on changes to files. A
   callback may optionally invoke a task. Which callback is invoked, is based
   on patternfiles, which are .gitignore like rule files.

   A callback should be extremely short lived. A task can be long running.
   Multiple callbacks can coalesce to one task run, if they are appearing
   within the \`--sleep\` period.

Flags:
EOF
   monitor::print_flags "${verbose}" | LC_ALL=C sort


   cat <<EOF

Commands:
EOF

   monitor::print_commands "${verbose}" | LC_ALL=C sort

   if [ "${verbose}" = 'NO' ]
   then
      cat <<EOF
      (use mulle-monitor -v help to show more commands)
EOF
   fi

   cat <<EOF

   Use ${MULLE_USAGE_NAME} <command> -h for topical help.
EOF

   exit 1
}


monitor::usage()
{
   monitor::_usage "$@" >&2
   exit 1
}


monitor::environment()
{
   log_entry "monitor::environment" "$@"

   local directory="$1"

   if [ -z "${directory}" ]
   then
      directory="${MULLE_VIRTUAL_ROOT}"
   fi
   if [ -z "${directory}" ]
   then
      directory="`pwd -P`"
   fi

   if [ -z "${MULLE_HOSTNAME}" ]
   then
      MULLE_HOSTNAME="`hostname -s`"
   fi

   [ -z "${MULLE_PATH_SH}" ] && \
      . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh"

   r_absolutepath "${directory}"
   MULLE_MONITOR_PROJECT_DIR="${RVAL}"

   eval `( cd "${MULLE_MONITOR_PROJECT_DIR}" &&
           "${MULLE_ENV:-mulle-env}" --search-as-is mulle-tool-env monitor )` || exit 1

   MULLE_MONITOR_SLEEP_EXE=sleep

   if [ -z "${MULLE_MONITOR_SLEEP_TIME}" ]
   then
      case "${MULLE_UNAME}" in
         linux|darwin)
            MULLE_MONITOR_SLEEP_TIME="1" # "0.3s"
         ;;
      esac
   fi

#   if [ "${MULLE_FLAG_LOG_SETTINGS}" = 'YES' ]
#   then
#      log_setting "MULLE_MONITOR_ETC_DIR='${MULLE_MONITOR_ETC_DIR}'"
#      log_setting "MULLE_MONITOR_PROJECT_DIR='${MULLE_MONITOR_PROJECT_DIR}'"
#      log_setting "MULLE_MONITOR_SHARE_DIR='${MULLE_MONITOR_SHARE_DIR}'"
#      log_setting "MULLE_MONITOR_SLEEP_EXE='${MULLE_MONITOR_SLEEP_EXE}'"
#      log_setting "MULLE_MONITOR_SLEEP_TIME='${MULLE_MONITOR_SLEEP_TIME}'"
#      log_setting "MULLE_MONITOR_VAR_DIR='${MULLE_MONITOR_VAR_DIR}'"
#   fi
}


monitor::main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'
   local MULLE_MONITOR_PREEMPT='YES'

   if [ -z "${MULLE_PATH_SH}" ]
   then
      # shellcheck source=mulle-path.sh
      . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh"      || return 1
   fi
   if [ -z "${MULLE_FILE_SH}" ]
   then
      # shellcheck source=mulle-file.sh
      . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh"      || return 1
   fi

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h*|--help|help)
            monitor::usage "${MULLE_TRACE}"
         ;;

         -f)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         --preempt)
            MULLE_MONITOR_PREEMPT='YES'
         ;;

         --no-preempt)
            MULLE_MONITOR_PREEMPT='NO'
         ;;

         --default-callback)
            [ $# -eq 1 ] && monitor::usage "${MULLE_TRACE}" "Missing argument to \"$1\""
            shift

            MULLE_MONITOR_DEFAULT_CALLBACK="$1"
         ;;

         --sleep)
            [ $# -eq 1 ] && monitor::usage "${MULLE_TRACE}" "Missing argument to \"$1\""
            shift

            MULLE_MONITOR_SLEEP_TIME="$1"
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            # pass to run
            break
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   local cmd

   case "$1" in
      -*)
         cmd='run'
      ;;

      "")
         cmd='run'
         [ $# -eq 0 ] || monitor::usage "${MULLE_TRACE}"
      ;;

      *)
         cmd="$1"
         shift
      ;;
   esac

   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      MULLE_VIRTUAL_ROOT="`pwd -P`"
      [ "${MULLE_VIRTUAL_ROOT}" = "/" ] && fail "MULLE_VIRTUAL_ROOT must not be /"
      log_fluff "mulle-monitor sets MULLE_VIRTUAL_ROOT to \"${MULLE_VIRTUAL_ROOT}\""
   fi

   local rval

   monitor::environment

   case "${cmd}" in
      help)
         monitor::usage "${MULLE_TRACE}"
      ;;

      callback)
         # shellcheck source=src/mulle-monitor-callback.sh
         . "${MULLE_MONITOR_LIBEXEC_DIR}/mulle-monitor-callback.sh"

         monitor::callback::main "$@"
      ;;

      clean|list|match|patternfile)
         MULLE_USAGE_NAME="${MULLE_USAGE_NAME}" \
            exekutor "${MULLE_MATCH:-mulle-match}" \
                           ${MULLE_TECHNICAL_FLAGS} \
                        "${cmd//patternfiles/patternfile}" \
                           "$@"
      ;;

      libexec-dir|library-path)
         printf "%s\n" "${MULLE_MONITOR_LIBEXEC_DIR}"
      ;;

      run)
         # shellcheck source=src/mulle-monitor-run.sh
         . "${MULLE_MONITOR_LIBEXEC_DIR}/mulle-monitor-run.sh"

         monitor::run::main "$@"
      ;;

      task)
         # shellcheck source=src/mulle-monitor-task.sh
         . "${MULLE_MONITOR_LIBEXEC_DIR}/mulle-monitor-task.sh"

         monitor::task::main "$@"
      ;;

      uname)
         printf "%s\n" "${MULLE_UNAME}"
         return 0
      ;;

      version)
         printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      *)
         MULLE_EXECUTABLE_FAIL_PREFIX="${MULLE_EXECUTABLE_NAME}"
         log_error "Unknown command \"${cmd}\""
         monitor::usage "${MULLE_TRACE}"
      ;;
   esac
}


call_with_flags "monitor::main" "${MULLE_MONITOR_FLAGS}" "$@"
