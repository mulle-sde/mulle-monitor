#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###


run_mulle_monitor()
{
   echo "####################################" >&2
   echo mulle-monitor ${MULLE_MONITOR_FLAGS} "$@"  >&2
   echo "####################################" >&2

   (
      MULLE_MONITOR_LIBEXEC_DIR="`${MULLE_MONITOR} libexec-dir`"

      . "${MULLE_MONITOR}" ${MULLE_MONITOR_FLAGS} "$@"
   )
}


expect_mulle_monitor()
{
   log_entry "expect_mulle_monitor" "$@"

   local expected="$1"; shift

   local result

   result="`run_mulle_monitor "$@"`" || exit 1

   if [ "${result}" != "${expected}" ]
   then
      fail "Result \"${result}\" was expected to be \"${expected}\""
   fi
}


expect_failure_mulle_monitor()
{
   log_entry "expect_failure_mulle_monitor" "$@"

   local result

   if result="`run_mulle_monitor "$@"`"
   then
      fail "Did not fail unexpectedly"
   fi
}


main()
{
   MULLE_MONITOR_FLAGS="$@"

   _options_mini_main "$@" && set -x

   case "${MULLE_UNAME}" in
     linux)
     ;;

    *)
        log_info "skip inotifytest test on \"${MULLE_UNAME}\""
        return 0
     ;;
   esac

   #-----------

   INOTIFYWAIT="${PWD}/../mock-inotifywait"
   [ -x "${INOTIFYWAIT}" ] || fail "\"${INOTIFYWAIT}\" is missing"
   export INOTIFYWAIT

   MULLE_INOTIFYWAIT_REPLAY_FILE="create-src-foo-sh-replay.txt" \
      expect_mulle_monitor "VfL Bochum 1848" run

   log_verbose "----- #1 PASSED -----"

   log_info "----- ALL PASSED -----"
}



init()
{
   MULLE_MONITOR="${MULLE_MONITOR:-${PWD}/../../mulle-monitor}"
}


init "$@"
main "$@"

